// Generated by CoffeeScript 1.6.3
var BaseService, XML, filters, https;

https = require('https');

XML = require('../../../xml-objects').XML;

filters = require('../../../../http-helpers');

filters.patch();

filters.SERIALIZERS['application/xml'] = function(data) {
  return XML.stringify(data);
};

filters.PARSERS['text/xml'] = function(body) {
  return XML.parse(body);
};

BaseService = (function() {
  BaseService.DEFAULT_PORT = 443;

  function BaseService(host, port) {
    if (port == null) {
      port = this.constructor.DEFAULT_PORT;
    }
    if (typeof host !== 'string') {
      throw new Error('Host should be a string');
    }
    if (typeof port !== 'number') {
      throw new Error('Port should be a number');
    }
    this.host = host;
    this.port = port;
  }

  BaseService.prototype._fieldValue = function(object, path) {
    var key, result, _i, _len, _ref;
    result = object;
    _ref = path.split('.');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      result = result[key];
    }
    return result;
  };

  BaseService.prototype._signString = function(envelope, order) {
    var path, result, _i, _len;
    result = [];
    for (_i = 0, _len = order.length; _i < _len; _i++) {
      path = order[_i];
      result.push(this._fieldValue(envelope, path));
    }
    return result.join('');
  };

  BaseService.prototype.invoke = function(method, data, callback) {
    var body, envelope, headers, methodDef, path, request, _ref,
      _this = this;
    methodDef = this.constructor.METHODS[method];
    envelope = this._prepareClassic({
      data: data,
      container: methodDef.container,
      order: methodDef.order
    });
    _ref = filters.serialize(envelope, 'application/xml'), body = _ref[0], headers = _ref[1];
    path = this._pathClassic({
      method: method
    });
    request = https.request({
      host: this.host,
      port: this.port,
      method: 'POST',
      path: path,
      headers: headers,
      rejectUnauthorized: false
    });
    request.on('response', function(response) {
      return response.readAll(function(error, data) {
        console.log(_this._unprepare(filters.parse(response.headers, data)));
        return void 0;
      });
    });
    request.on('error', function(error) {
      if (typeof callback === "function") {
        callback(error);
      }
      return void 0;
    });
    console.log(data);
    console.log('');
    request.end(body);
    return this;
  };

  return BaseService;

})();

module.exports = BaseService;
