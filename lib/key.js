// Generated by CoffeeScript 1.6.3
var CRC_END, CRC_START, EXPONENT_START, FLAG_START, HEADER_SIZE, KEY_SIZE, Key, LENGTH_START, crypto, fs;

fs = require('fs');

crypto = require('crypto');

HEADER_SIZE = 24;

FLAG_START = 2;

CRC_START = 4;

CRC_END = 20;

LENGTH_START = 20;

KEY_SIZE = 140;

EXPONENT_START = 6;

Key = (function() {
  var checkData, decryptKeys, parseKeys;

  decryptKeys = function(keys, wmid, password) {
    var digest, index, octet, _i, _len, _ref;
    digest = crypto.createHash('md4').update(wmid).update(password).digest();
    _ref = keys.slice(6);
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      octet = _ref[index];
      keys[index + 6] = octet ^ digest[index % digest.length];
    }
    return this;
  };

  checkData = function(header, keys) {
    var crc;
    crc = header.toString('hex', CRC_START, CRC_END);
    header.fill(0, FLAG_START, CRC_END);
    return crypto.createHash('md4').update(header).update(keys).digest('hex') === crc;
  };

  parseKeys = function(keys) {
    var exponent, modulus;
    exponent = keys.slice(EXPONENT_START, EXPONENT_START + keys.readUInt16LE(4));
    modulus = keys.slice(EXPONENT_START + exponent.length + 2, EXPONENT_START + exponent.length + 2 + keys.readUInt16LE(EXPONENT_START + exponent.length));
    return new Key(exponent, modulus);
  };

  Key.fromBuffer = function(header, keys, wmid, password) {
    decryptKeys(keys, wmid, password);
    checkData(header, keys);
    return parseKeys(keys);
  };

  Key.fromFile = function(fileName, wmid, password) {
    var file, header, keys;
    file = fs.openSync(fileName, 'r');
    header = new Buffer(HEADER_SIZE);
    fs.readSync(file, header, 0, header.length);
    keys = new Buffer(header.readUInt32LE(LENGTH_START));
    fs.readSync(file, keys, 0, keys.length);
    fs.closeSync(file);
    return this.fromBuffer(header, keys, wmid, password);
  };

  function Key(exponent, modulus) {
    this.exponent = exponent;
    this.modulus = modulus;
  }

  return Key;

})();

module.exports = Key;
