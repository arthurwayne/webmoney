// Generated by CoffeeScript 1.6.1
var BigNum, ClassicService, WebService, crypto,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

crypto = require('crypto');

BigNum = require('bignum');

WebService = require('../../web-client').WebService;

ClassicService = (function(_super) {

  __extends(ClassicService, _super);

  ClassicService.DEFAULT_HOST = 'w3s.webmoney.ru';

  ClassicService.DEFAULT_PORT = 443;

  function ClassicService(wmid, key, host, port) {
    this.wmid = wmid;
    this.key = key;
    if (host == null) {
      host = this.constructor.DEFAULT_HOST;
    }
    if (port == null) {
      port = this.constructor.DEFAULT_PORT;
    }
    ClassicService.__super__.constructor.call(this, host, port);
  }

  ClassicService.prototype.path = function(options) {
    return '/asp/XML' + options.name + '.asp';
  };

  ClassicService.prototype.headers = function(body) {
    return {
      'content-type': 'application/xml; charset=' + this.charset,
      'content-length': body.length
    };
  };

  ClassicService.prototype.signData = function(data) {
    var buffer, digest, index, input, signature, test, _i;
    data = '2383300783891LoveHello';
    test = new Buffer('882c29241827a5fb686c9a1146fe2008a38e6278d2ce7d26c394a69ce0c5d56172233937d962cd6fbe428af2be77461328bc94ba47153a2a7481085f1a8cdf120527', 'hex');
    digest = crypto.createHash('md4').update(data, 'utf-8').digest();
    buffer = new Buffer(digest.length + 42);
    buffer.writeUInt16LE(buffer.length - 2, 0);
    buffer.write(digest, 2, 'binary');
    for (index = _i = 0; _i <= 39; index = ++_i) {
      buffer[2 + digest.length + index] = Math.round(Math.random() * 255);
    }
    input = BigNum.fromBuffer(buffer, {
      endian: 'little',
      size: this.key.modulus.length
    });
    console.log(input);
    signature = input.powm(BigNum.fromBuffer(this.key.exponent), BigNum.fromBuffer(this.key.modulus)).toBuffer({
      endian: 'little',
      size: this.key.modulus.length
    });
    console.log(test);
    console.log(signature.length);
    return signature.toString('hex');
  };

  ClassicService.prototype.assembleBody = function(options) {
    var envelope;
    envelope = {
      'w3s.request': {
        reqn: 1,
        wmid: this.wmid,
        sign: this.signData(),
        message: data
      }
    };
    return iconv.encode(XML.stringify(envelope), this.charset);
  };

  return ClassicService;

})(WebService);

module.exports = ClassicService;
