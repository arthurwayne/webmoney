// Generated by CoffeeScript 1.6.3
var Service, XML, https, iconv;

https = require('https');

iconv = require('iconv-lite');

XML = require('xml-objects').XML;

Service = (function() {
  function Service() {}

  Service.prototype._serialize = function(data) {
    return iconv.encode(XML.stringify(data), this.charset);
  };

  Service.prototype._body = function(options) {
    return this._serialize(this._prepare(options));
  };

  Service.prototype._headers = function(body) {
    return {
      'Content-Type': 'application/xml; charset=' + this.charset,
      'Content-Length': body.length
    };
  };

  Service.prototype._data = function(body) {
    return iconv.decode(body, 'utf-8');
  };

  Service.prototype.invoke = function(options) {
    var body, headers, path, request,
      _this = this;
    body = this._body(options);
    headers = this._headers(body);
    path = this._path(options);
    console.log(body.toString());
    request = https.request({
      host: this.host,
      port: this.port,
      method: 'POST',
      path: path,
      headers: headers,
      rejectUnauthorized: false
    });
    request.on('response', function(response) {
      var chunks;
      chunks = [];
      response.on('readable', function() {
        chunks.push(response.read());
        return void 0;
      });
      response.on('end', function() {
        var data;
        data = Buffer.concat(chunks);
        if (typeof options.callback === "function") {
          options.callback(null, _this._parse(data));
        }
        return void 0;
      });
      return void 0;
    });
    request.on('error', function(error) {
      if (typeof options.callback === "function") {
        options.callback(error);
      }
      return void 0;
    });
    request.end(body);
    return this;
  };

  return Service;

})();

module.exports = Service;
