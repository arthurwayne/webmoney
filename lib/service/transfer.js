// Generated by CoffeeScript 1.6.3
var BaseService, TransferService, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseService = require('./base');

TransferService = (function(_super) {
  __extends(TransferService, _super);

  function TransferService() {
    _ref = TransferService.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  TransferService.DEFAULT_HOST = 'transfer.gdcert.com';

  TransferService.METHODS = {
    prepayment1: {
      container: 'payment',
      order: ['wmid', 'payment.pspname', 'payment.pspcode', 'payment.pspnumber', 'payment.pspdate', 'payment.purse', 'payment.price']
    },
    payment1: {
      container: 'payment',
      order: ['wmid', 'payment.$id', 'payment.$test', 'payment.pspname', 'payment.pspcode', 'payment.pspnumber', 'payment.pspdate', 'payment.purse', 'payment.price', 'payment.cheque', 'payment.date', 'payment.kiosk_id']
    },
    history: {
      order: ['wmid', 'datestart', 'dateend']
    },
    PrePayment1: {
      container: 'payment',
      order: ['wmid', 'payment.$currency', 'payment.purse', 'payment.phone', 'payment.price']
    },
    Payment1: {
      container: 'payment',
      order: ['wmid', 'payment.$id', 'payment.$currency', 'payment.$test', 'payment.purse', 'payment.phone', 'payment.price', 'payment.date', 'payment.point']
    },
    History1: {
      order: ['wmid', 'datestart', 'dateend', 'wmtranid']
    },
    RetPayment1: {
      order: ['wmid', 'payment.remark', 'payment.wmtranid']
    },
    PrePayment2: {
      container: 'payment',
      order: ['wmid', 'payment.$currency', 'payment.purse', 'payment.price']
    },
    Payment2: {
      container: 'payment',
      order: ['wmid', 'payment.$id', 'payment.$currency', 'payment.$test', 'payment.purse', 'payment.price', 'payment.date', 'payment.point']
    }
  };

  return TransferService;

})(BaseService);

module.exports = TransferService;
